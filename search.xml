<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>pyenv how-to 정리</title>
      <link href="/2018/04/23/pyenv/"/>
      <content type="html"><![CDATA[<p>회사에서 <a href="https://github.com/apache/incubator-superset" target="_blank" rel="noopener">apache superset</a>을 분석용도로 커스터마이징해서 비즈니스 유닛이 쓸 수 있도록 개발하고 있다. python 개발은 처음이라 pyenv도 하나도 몰랐는데 문서화하면서 이것저것 배웠다. 개인 목적으로도 pyenv를 쓸 일이 있을 것 같아 블로그에도 정리해두려고 한다.</p><h2 id="pyenv를-쓰는-이유"><a href="#pyenv를-쓰는-이유" class="headerlink" title="pyenv를 쓰는 이유?"></a>pyenv를 쓰는 이유?</h2><p>python 개발을 하다보면 특정 라이브러리에서는 다른 python 버전을 요구하는 경우가 있어서 python 버전을 달리해야 하는 경우가 생긴다. 거기다 프로젝트 별로 다른 라이브러리를 사용하는데 만약 공통 환경에다가 라이브러리를 잔뜩 설치해두고 여러 프로젝트들이 그 환경을 공유하다 보면 문제가 생겼을 때 어떤 라이브러리에서 문제가 생긴것인지 디버깅하기 어렵다. 그래서 프로젝트별로 하나의 밀폐된 버블을 만들어두고 그 환경 안에서 python의 버전을 바꾸거나 라이브러리를 인스톨하는 것이다. pyenv의 nodejs판은 nodebrew가 있다.</p><h2 id="Install-MacOS"><a href="#Install-MacOS" class="headerlink" title="Install (MacOS)"></a>Install (MacOS)</h2><p>MacOS를 쓰고 있다면 python도 pip도 이미 깔려있을 것이다. 그러나 혹시 pip not found를 발견한다면,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ensurepip</span><br></pre></td></tr></table></figure></p><p>으로 pip를 설치한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv-virtualenv</span><br></pre></td></tr></table></figure><p>pyenv-virtualenv를 인스톨 후 사용 가능한 python버전을 확인한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure></p><p>나는 python2를 사용할 것이기 때문에 가장 최근 버전인 2.7.14를 설치할 것이다. 설치되는 경로는 /Users/${username}/.pyenv/versions/2.7.14이다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 2.7.14</span><br></pre></td></tr></table></figure></p><p>그 다음 2.7.14 버전을 이용한 새로운 환경 (버블)을 만든다. 위 경로에서 새로운 폴더가 추가된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv 2.7.14 $&#123;env_name&#125;</span><br></pre></td></tr></table></figure></p><p>여기까지 한 다음에, 유저의 profile파일에 다음 사항을 추가한다.<br>(bashrc나 zshrc등.)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(pyenv init -)&quot;</span><br><span class="line">eval &quot;$(pyenv virtualenv-init -)&quot;</span><br><span class="line"></span><br><span class="line"># update rc file</span><br><span class="line">source ~./zshrc</span><br></pre></td></tr></table></figure></p><p>이제 드디어 환경 액티베이트!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv $&#123;env_name&#125;</span><br></pre></td></tr></table></figure></p><p>이제 까먹어도 다시 이 포스팅을 보면 된다!</p>]]></content>
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo 블로그 사용법</title>
      <link href="/2018/04/22/hexo-blog-howto/"/>
      <content type="html"><![CDATA[<p>한 달전 잠시 만져보고 또 한동안 쓰지 않으니 손에 익지 않아서, 다시 마크다운 문법도 연습하고 공부도 하는 겸 블로그 글을 쓰려고 한다. 그런데 어떻게 글을 발행하려고 하는 것 부터 이미 난관이다. 사람이 어디 적어두지를 않으면 찾고 또 찾고 시간을 낭비할 것을 알기에 생각난 김에 정리한다.</p><p>/source 아래에 폴더들이 있고 각 폴더들은 블로그 디렉토리 구조와 같다.</p><h2 id="new-post"><a href="#new-post" class="headerlink" title="new post"></a>new post</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post $&#123;postName&#125;</span><br></pre></td></tr></table></figure><h2 id="check-on-local-server-listening-on-4000"><a href="#check-on-local-server-listening-on-4000" class="headerlink" title="check on local server (listening on 4000)"></a>check on local server (listening on 4000)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="deploy-to-github"><a href="#deploy-to-github" class="headerlink" title="deploy to github"></a>deploy to github</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>또는,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><p>우선 쓰면서 익숙해지면 더 추가해야지.</p><p>추기 1. 맥에서 배포를 하는 중에 파일명이 한글일 경우 404에러가 뜨면서 페이지를 볼 수 없었다.<br>맥에서는 인코딩 방법이 달라서 그렇다는 포스팅을 발견… 구글링을 해봤지만 딱히 해결책을 찾을 수 없어서 영어로 변경했음. 귀찮다.</p>]]></content>
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hello_world</title>
      <link href="/2018/03/21/hello-world/"/>
      <content type="html"><![CDATA[<p>매번 들어가보는 블로그에 powered by hexo라고 써있어서 호기심에 한번 시작해봤다. 처음엔 뭐야 이거? 하다가 오 나쁘지 않아 오 신기해 오 이걸로 옮겨야겠다! 하고 생각이 들었다. 마음에 드는 테마도 찾아서 좋다. favicon이 신경쓰이고 아직 테마 커스터마이징도 마치지 못했지만 앞으로 medium 대신에 여기에 삽질노트를 적어두어야겠다. 새로운 집을 찾은 것 마냥 신이 난다. 야호!<br><br><br>그런데 마크다운은 어떻게 움직이는 것이냐!</p>]]></content>
      
      
        <tags>
            
            <tag> personal </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
